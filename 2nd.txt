✅ Java Identifier Rules (as in the image)
When you name variables, methods, classes, etc., in Java:
1]Start with → a letter (a-z or A-Z), $, or _ 
Example: age, _value, $price ✅
Example: 123num ❌ (cannot start with a digit)
2]Case-sensitive → age and Age are different identifiers.
3]No spaces or special characters →
studentName ✅
student name ❌
student-name ❌
4]No Java keywords → cannot use reserved words (int, class, static, etc.) as names. 

myNameGayatri ==>> camel Case
my_name_is_gayatri ==>>snake case


📘 Primitive Data Types in Java (with Usage)
1. byte
Size: 1 byte (8 bits)
Range: -128 to 127
When to use:
When you need to save memory (e.g., in large arrays where values are small).
Useful for numbers that will always fit in -128 to 127 range (like age, small counters).
Example:
byte age = 25; // small number, memory efficient

2. short
Size: 2 bytes
Range: -32,768 to 32,767
When to use:
When you need small numbers and want to save memory compared to int.
Rarely used in modern Java (since memory is usually not a big issue).
Example:
short year = 2025; // enough for years, but int is more common

3. int
Size: 4 bytes
Range: -2,147,483,648 to 2,147,483,647
When to use:
Default choice for integer values.
Most common for counting, IDs, salaries, marks, etc.
Example:
int salary = 50000; // typical int usage

4. long

Size: 8 bytes
Range: Very large numbers
When to use:
When int is not enough (e.g., population, distance in nanometers, phone numbers).
Always add L at the end.
Example:
long population = 7800000000L; // world population

5. float
Size: 4 bytes
Range: ~7 decimal digits precision
When to use:
For fractional numbers where precision is not critical.
Example: temperature, percentage, height.
Must end with f.
Example:
float temperature = 36.6f; // body temperature

6. double

Size: 8 bytes
Range: ~15 decimal digits precision
When to use:
Default choice for decimal numbers.
Use when high precision is needed (scientific calculations, money with fractions).
Example:
double pi = 3.141592653589793; // precise value

7. char
Size: 2 bytes (Unicode, so supports all languages/symbols)
When to use:
To store a single character (letter, digit, symbol).
Useful for initials, grade, symbols.
Example:
char grade = 'A'; // exam gradechar symbol = '$'; // currency symbol

8. boolean
Size: 1 bit (true/false)
When to use:
For conditions, flags, decision making.
Used in if-else, loops, logical operations.
Example:
boolean isJavaFun = true;boolean isAdult = age >= 18;
