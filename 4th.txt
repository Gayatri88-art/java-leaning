##Common String Methods:
| Method                  | Purpose                               |
| ----------------------- | ------------------------------------- |
| `length()`              | Returns length of the string          |
| `charAt(index)`         | Returns character at given index      |
| `substring(start, end)` | Extracts part of the string           |
| `toUpperCase()`         | Converts to uppercase                 |
| `toLowerCase()`         | Converts to lowercase                 |
| `equals(str)`           | Compares two strings (case-sensitive) |
| `equalsIgnoreCase(str)` | Case-insensitive comparison           |
| `replace(a, b)`         | Replaces characters or substrings     |
| `contains(str)`         | Checks if string contains a substring |


##Common Format Specifiers
| Specifier | Meaning                  | Example    |
| --------- | ------------------------ | ---------- |
| `%s`      | String                   | `"Hello"`  |
| `%d`      | Integer                  | `42`       |
| `%f`      | Floating-point (decimal) | `3.14`     |
| `%.2f`    | Decimal with 2 places    | `3.14`     |
| `%c`      | Character                | `'A'`      |
| `%n`      | New line (like `\n`)     | Line break |

ðŸ’¡ Why %% and not just %?
In format strings:
% is a special character for format specifiers (%s, %d, %f, etc.)
So if you want a real % in the output, you need to escape it by doubling: %%


###Java Operator Precedence Table
| Operator Type      | Operators                                 | Associativity          |               |               |
| ------------------ | ----------------------------------------- | ---------------------- | ------------- | ------------- |
| **Postfix**        | `expr++` `expr--`                         | Left to Right          |               |               |
| **Unary**          | `++expr` `--expr` `+expr` `-expr` `~` `!` | Right to Left          |               |               |
| **Multiplicative** | `*` `/` `%`                               | Left to Right          |               |               |
| **Additive**       | `+` `-`                                   | Left to Right          |               |               |
| **Relational**     | `<` `>` `<=` `>=` `instanceof`            | Left to Right          |               |               |
| **Equality**       | `==` `!=`                                 | Left to Right          |               |               |
| **Logical AND**    | `&&`                                      | Left to Right          |               |               |
| **Logical OR**     | \`                                        | Left to Right 
| **Ternary**        | `? :`                                     | Right to Left          |               |               |
| **Assignment**     | `=` `+=` `-=` `*=` `/=` `%=` `&=` `^=` \` | =` `<<=` `>>=` `>>>=\` | Right to Left |               |


